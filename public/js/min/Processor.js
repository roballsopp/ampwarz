"use strict";function dB2Mag(e){return Math.pow(10,e/20)}function mag2dB(e){return 20*Math.logB(10,e)}function zeroFill(e){var t=e.length;while(t){t--;e[t]=0}}function toMono(e){if(e.X[0].length==0){worker.postMessage({type:"error",message:"Cannot convert to mono. No data."});return false}if(e.channels!=1){for(var t=0;t<e.X[0].length;t++){e.X[0][t]+=e.X[1][t]}e.X[1]=null;e.channels=1}return true}function toStereo(e){if(e.X[0].length==0){worker.postMessage({type:"error",message:"Cannot convert to stereo. No data."});return false}if(e.channels!=2){e.X[1]=new Float32Array(e.X[0].buffer.slice(0));e.channels=2}return true}function volumedB(e,t){var n=e.X[0].length;if(n==0){worker.postMessage({type:"error",message:"Cannot change volume. No data."});return false}var r=dB2Mag(t);for(var i=0;i<e.channels;i++){for(var s=0;s<n;s++)e.X[i][s]*=r}worker.postMessage({type:"status",message:"Volume adjustment success."});return true}function getRMS(e){if(e.X[0].length==0){worker.postMessage({type:"error",message:"Cannot get RMS. No data."});return false}var t=e.X[0].length;var n=e.channels;var r=0;var i=0;for(var s=0;s<n;s++){for(var o=0;o<t;o++)r+=Math.pow(e.X[s][o],2)}r/=n;r=Math.pow(r/t,.5);i=mag2dB(r);worker.postMessage({type:"status",message:"RMS: "+r+" ("+i+" dB)."});return i}function FFTbase(e,t,n){var r=n/2;var i=n-1;var s=Math.floor(Math.log(n)/Math.log(2));var o=r;var u=r;var a,f,l,c,h,p;for(var d=1;d<i;d++){if(d<o){a=e[o];f=t[o];e[o]=e[d];t[o]=t[d];e[d]=a;t[d]=f}u=r;while(u<=o){o-=u;u/=2}o+=u}for(var v=1;v<=s;v++){var m=Math.floor(Math.pow(2,v));var g=m/2;l=1;c=0;h=Math.cos(Math.PI/g);p=-Math.sin(Math.PI/g);for(var o=1;o<=g;o++){var y=o-1;for(var d=y;d<n;d+=m){var b=d+g;a=e[b]*l-t[b]*c;f=e[b]*c+t[b]*l;e[b]=e[d]-a;t[b]=t[d]-f;e[d]+=a;t[d]+=f}a=l;l=a*h-c*p;c=a*p+c*h}}return}function FFT(e,t){var n=e.length;var r=n/2;var i=n-1;var s=n/4;var o=Math.floor(Math.log(n)/Math.log(2));var u=Math.floor(Math.pow(2,o));var a=u/2;var f,l,c,h,p;var d,v,m=1,g=0,y=Math.cos(Math.PI/a),b=-Math.sin(Math.PI/a);for(var w=0;w<r;w++){e[w]=e[2*w];t[w]=e[2*w+1]}FFTbase(e,t,r);for(var w=1;w<s;w++){l=r-w;c=w+r;h=l+r;e[c]=(t[w]+t[l])*.5;e[h]=e[c];t[c]=-(e[w]-e[l])*.5;t[h]=-t[c];e[w]=(e[w]+e[l])*.5;e[l]=e[w];t[w]=(t[w]-t[l])*.5;t[l]=-t[w]}e[n*3/4]=t[s];e[r]=t[0];t[n*3/4]=0;t[r]=0;t[s]=0;t[0]=0;for(var E=1;E<=a;E++){f=E-1;for(var w=f;w<i;w+=u){p=w+a;d=e[p]*m-t[p]*g;v=e[p]*g+t[p]*m;e[p]=e[w]-d;t[p]=t[w]-v;e[w]+=d;t[w]+=v}d=m;m=d*y-g*b;g=d*b+g*y}return true}function inverseFFT(e,t){var n=e.length;for(var r=n/2+1;r<n;r++){e[r]=e[n-r];t[r]=-t[n-r]}for(var r=0;r<n;r++)e[r]+=t[r];FFT(e,t);for(var r=0;r<n;r++)e[r]=(e[r]+t[r])/n;return true}function convolve(e,t,n){worker.postMessage({type:"status",message:"Convolving..."});var r=e.X[0].length;var i=t.X[0].length;var s=Math.pow(2,n);if(s<i+3){worker.postMessage({type:"error",message:"Failed to convolve wave files. Resolution must be at least "+Math.logB(2,i+3)});return false}if(e.channels==2){toStereo(t)}else if(t.channels==2){toStereo(e)}for(var o=0;o<e.channels;o++){worker.postMessage({type:"status",message:"Convolving channel "+(o+1)+"..."});var u=new Float32Array(s);var a=new Float32Array(s);zeroFill(u,s);zeroFill(a,s);for(var f=0;f<i;f++){u[f]=t.X[o][f]}FFT(u,a);var l=s-i+1;var c=Math.floor(r/l);var h=new Float32Array(r);zeroFill(h,r);var p=new Float32Array(s);var d=new Float32Array(s);var v=new Float32Array(s);var m;for(var g=0;g<c+1;g++){m=g*l;for(var f=0;f<s;f++){p[f]=0;d[f]=0;v[f]=0}if(g==c)l=r%l;for(var f=0;f<l;f++){p[f]=e.X[o][f+m]}FFT(p,d);for(var f=0;f<s/2+1;f++){v[f]=p[f]*u[f]-d[f]*a[f];d[f]=d[f]*u[f]+p[f]*a[f];p[f]=v[f]}inverseFFT(p,d);if(g==c){for(var f=0;f<l;f++){h[m+f]+=p[f]}}else{for(var f=0;f<s;f++){h[m+f]+=p[f]}}worker.postMessage({type:"progress",value:g/c*100})}for(var f=0;f<r;f++)e.X[o][f]=h[f]}worker.postMessage({type:"status",message:"Convolution complete. Convolved "+(c+1)+" segments."});return true}importScripts("signalCom.js");var worker=this;Math.logB=function(e,t){return Math.log(t)/Math.log(e)};this.onmessage=function(e){var t=e.data.command;switch(t){case"process":var n=reconstruct(e.data.signal);var r=reconstruct(e.data.filter);convolve(n,r,18);var i=getRMS(n);volumedB(n,-18-i);n=deconstruct(n);var s={type:"signal",signal:n};worker.postMessage(s,getBufferList(n));break;default:worker.postMessage({type:"error",message:"Command not recognized"});break}}